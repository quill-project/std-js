
mod std

/// This is a dirty dirty hack. Integers in Quill are supposed to behave like
/// signed 64 bit integers, but in this case they don't. 'BigInt.asIntN'
/// would by the best choice here, but testing showed that it breaks stuff
/// on a few specific versions of Firefox, so this is the best we can do.
ext fun Int::as_int_64(self: Int) -> Int = "
    return #var(self) % (2n ** 64n);
"

pub ext fun Int::plus(lhs: Int, rhs: Int) -> Int = "
    return #fun(Int::as_int_64)(#var(lhs) + #var(rhs));
"

pub ext fun Int::minus(lhs: Int, rhs: Int) -> Int = "
    return #fun(Int::as_int_64)(#var(lhs) - #var(rhs));
"

pub ext fun Int::times(lhs: Int, rhs: Int) -> Int = "
    return #fun(Int::as_int_64)(#var(lhs) * #var(rhs));
"

pub ext fun Int::div(lhs: Int, rhs: Int) -> Int = "
    return #fun(Int::as_int_64)(#var(lhs) / #var(rhs));
"

pub ext fun Int::rem(lhs: Int, rhs: Int) -> Int = "
    if(#var(rhs) === 0n) { 
        #fun(panic[Unit])(\"Integer division by zero\")
    }
    return #fun(Int::as_int_64)(#var(lhs) % #var(rhs));
"

pub ext fun Int::lt(lhs: Int, rhs: Int) -> Bool = "
    return #var(lhs) < #var(rhs);
"

pub ext fun Int::gt(lhs: Int, rhs: Int) -> Bool = "
    return #var(lhs) > #var(rhs);
"

pub ext fun Int::lt_eq(lhs: Int, rhs: Int) -> Bool = "
    return #var(lhs) <= #var(rhs);
"

pub ext fun Int::gt_eq(lhs: Int, rhs: Int) -> Bool = "
    return #var(lhs) >= #var(rhs);
"

pub ext fun Int::eq(lhs: Int, rhs: Int) -> Bool = "
    return #var(lhs) === #var(rhs);
"

pub ext fun Int::not_eq(lhs: Int, rhs: Int) -> Bool = "
    return #var(lhs) !== #var(rhs);
"

pub ext fun Int::u_minus(x: Int) -> Int = "
    return #fun(Int::as_int_64)(-(#var(x)));
"

pub ext fun Int::as_string(self: Int) -> String = "
    return '' + #var(self);
"

pub ext fun Int::as_float(self: Int) -> Float = "
    return Number(#var(self));
"