
mod std

pub ext fun String::eq(lhs: String, rhs: String) -> Bool = "
    return #var(lhs) === #var(rhs);
"

pub ext fun String::not_eq(lhs: String, rhs: String) -> Bool = "
    return #var(lhs) !== #var(rhs);
"

ext fun String::slice_unchecked(self: String, start: Int, end: Int) -> String = "
    let start_offset = 0;
    for(let i = 0n; i < #var(start); i += 1n) {
        start_offset += #var(self).codePointAt(start_offset) > 0xFFFF? 2 : 1;
    }
    let end_offset = start_offset;
    for(let c = #var(start); c < #var(end); c += 1n) {
        end_offset += #var(self).codePointAt(end_offset) > 0xFFFF? 2 : 1;
    }
    return #var(self).substring(start_offset, end_offset);
"

ext fun String::slice_from_unchecked(self: String, start: Int) -> String = "
    let start_offset = 0;
    for(let i = 0n; i < #var(start); i += 1n) {
        start_offset += #var(self).codePointAt(start_offset) > 0xFFFF? 2 : 1;
    }
    return #var(self).substring(start_offset, #var(self).length);
"

pub ext fun String::concat(low: String, high: String) -> String = "
    return #var(low) + #var(high);
"

pub ext fun String::length(self: String) -> Int = "
    return BigInt(#var(self).length);
"

ext fun String::as_code_unchecked(self: String) -> Int = "
    return BigInt(#var(self).codePointAt(0));
"

ext fun String::from_code_unchecked(code: Int) -> String = "
    return String.fromCodePoint(Number(#var(code)));
"

pub fun String::chars(self: String) -> mut Sequence[String] {
    mut rem: String = self
    return Sequence::new(|| {
        val rem_l: Int = rem |> length()
        if rem_l == 0 { return Option::None }
        val curr = rem |> slice_to(1)
        rem = rem |> slice_from(1)
        return Option::Some(curr)
    })
}

pub fun String::chars_rep(self: String) -> mut Stream[String] {
    if (self |> length()) == 0 {
        return panic("Attempt to get char stream from empty string!")
    }
    mut rem: String = self
    return Stream::new(|| {
        if (rem |> length()) == 0 { rem = self }
        val curr = rem |> slice_to(1)
        rem = rem |> slice_from(1)
        return curr
    })
}